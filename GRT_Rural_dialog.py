# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GRT_RuralDialog
                                 A QGIS plugin
 GRT_Rural
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-07-20
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Marc Yeranosyan
        email                : marc.yeranosyan@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import qgis
import processing
from qgis.PyQt import *
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QProgressBar
from qgis.core import QgsProcessingAlgorithm, QgsProject
from qgis.core import QgsVectorLayer

from qgis.core import (
  QgsProcessingContext,
  QgsTaskManager,
  QgsTask,
  QgsProcessingAlgRunnerTask,
  Qgis,
  QgsProcessingFeedback,
  QgsApplication,
  QgsMessageLog)
  

from qgis.utils import iface
from .progre import *


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'GRT_Rural_dialog_base.ui'))


class GRT_RuralDialog(QtWidgets.QDialog, FORM_CLASS):


    def __init__(self, parent=None):
        """Constructor."""
        super(GRT_RuralDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        
        #CONNEXION AUX BUTTONNES
        self.ctrl_fusion.pressed.connect(self.CTRL_Fusion)
        self.ctrl_dxf.pressed.connect(self.CTRLS_DXF)
        self.ctrl_indiv.pressed.connect(self.CTRLS_INDIV)
        self.renum.pressed.connect(self.Renum)
        self.exportt.pressed.connect(self.Export)
        
        #nettoyage
        self.avcorr.pressed.connect(self.Nett_avcorr)
        self.apcorr.pressed.connect(self.Nett_apcorr)
        
        self.communes.pressed.connect(self.Communes)
        self.reseaux.pressed.connect(self.Reseaux)
        

        
    def CTRL_Fusion(self):
        l_aff = None
        l_cal = None
        l_poste = None
        layers = QgsProject.instance().mapLayers().values()
        for l in layers:
            if 'Fusion' in l.name() and 'DET' in l.name():
                l_det = l
            if 'Fusion' in l.name() and 'CTRL' in l.name():
                l_ctrl = l
            if 'Fusion' in l.name() and 'AFF' in l.name():
                l_aff = l
            if 'Fusion' in l.name() and 'CAL' in l.name():
                l_cal = l
            if 'Fusion' in l.name() and 'POSTE' in l.name():
                l_poste = l

        f = QgsProcessingFeedback()
        Prog_global(f)
        
        processing.runAndLoadResults("model:01-Controle Fusion", {'communesinsee2021':'COMMUNES',
        'detligne':'LIGNE DET',
        'fusionaff':l_aff,
        'fusioncal':l_cal,
        'fusionctrl':l_ctrl,
        'fusionposte':l_poste,
        'points':l_det,
        'native:deleteduplicategeometries_1:LOCALISATION ERREURS LIGNE DET':'TEMPORARY_OUTPUT',
        'native:extractbyattribute_5:VERIF EPOS AVCOR':'TEMPORARY_OUTPUT',
        'native:fieldcalculator_1:VERIFCTRLvsDET':'TEMPORARY_OUTPUT',
        'native:refactorfields_1:DET':'TEMPORARY_OUTPUT',
        'native:refactorfields_2:CTRL':'TEMPORARY_OUTPUT',
        'native:refactorfields_4:Distances et Angles':'TEMPORARY_OUTPUT',
        'qgis:fieldcalculator_7:POSTE':'TEMPORARY_OUTPUT',
        'qgis:fieldcalculator_8:AFF':'TEMPORARY_OUTPUT',
        'qgis:fieldcalculator_9:CAL':'TEMPORARY_OUTPUT',
        'script:Profile grt_1:GRAPH_ETIQUETTES':'TEMPORARY_OUTPUT',
        'script:Profile grt_1:GRAPH_TABLEAU':'TEMPORARY_OUTPUT',
        'script:Profile grt_1:GRAPH_TERRAIN':'TEMPORARY_OUTPUT',
        'script:Profile grt_2:GRAPH_CANA':'TEMPORARY_OUTPUT'}, feedback=f)




    def CTRLS_INDIV(self):
        f = QgsProcessingFeedback()
        Prog_global(f)
        processing.runAndLoadResults("model:02-Create CTRLS INDIV", {'det2':'DET',
        'qgis:createpointslayerfromtable_4:CTRLs_Crées':'TEMPORARY_OUTPUT'}, feedback=f)
        layers = QgsProject.instance().mapLayers().values()
        for l in layers:
            if l.name() == 'DET':
                qgis.utils.iface.setActiveLayer(l)



        
    def CTRLS_DXF(self):
        f = QgsProcessingFeedback()
        Prog_global(f)        
        processing.runAndLoadResults("model:02-Create CTRLS_DXF", {'champ':'Text',
        'controletext':'C',
        'ctrlsduterrain':'-SURVEY_CTRL_GNSS(P)',
        'det':'DET',
        'qgis:createpointslayerfromtable_4:CTRLs_Crées':'TEMPORARY_OUTPUT'}, feedback = f)

    def Renum(self):
        layers = QgsProject.instance().mapLayers().values()
        for l in layers:
            if 'Fusion' in l.name() and '_DET' in l.name():
                l_det = l
            if 'Fusion' in l.name() and '_CTRL' in l.name():
                l_ctrl = l
                
        f = QgsProcessingFeedback()
        Prog_global(f)
        
        processing.runAndLoadResults("model:03-Renum", {'cetligne2':'LIGNE DET 2',
        'fusionctrl':'CTRL',
        'fusionctrl2':l_ctrl,
        'fusiondet':'DET',
        'fusiondet2':l_det ,
        'lignectrl2':'LIGNE CTRL 2',
        'sueveydetdetectiongps':'-SURVEY_DET_DETECTON_GPS(L)',
        'native:deleteduplicategeometries_1:LOCALISATION ERREURS LIGNE CTRL 2':'TEMPORARY_OUTPUT',
        'native:deleteduplicategeometries_2:LOCALISATION ERREURS LIGNE DET 2':'TEMPORARY_OUTPUT',
        'native:extractbyattribute_5:VERIF EPOS CTRL-DET':'TEMPORARY_OUTPUT',
        'native:extractbyexpression_2:VERIF OPERATEURS et DATES':'TEMPORARY_OUTPUT',
        'qgis:refactorfields_1:Modif_DET':'TEMPORARY_OUTPUT',
        'qgis:refactorfields_2:Modif_CTRL':'TEMPORARY_OUTPUT',
        'qgis:refactorfields_4:Qualif_Trace_Initial':'TEMPORARY_OUTPUT'}, feedback = f)


    def Export(self):
        f = QgsProcessingFeedback()
        Prog_global(f)    
        
        l_aff = None
        l_cal = None
        l_poste = None
        layers = QgsProject.instance().mapLayers().values()
        for l in layers:
            if l.name() == 'AFF':
                l_aff = l
            if l.name() == 'CAL':
                l_cal = l
            if l.name() == 'POSTE':
                l_poste = l

        processing.run("model:04-Export", {'aff':l_aff,
        'cal':l_cal,
        'ctrl':'Modif_CTRL',
        'det':'Modif_DET',
        'poste':l_poste,
        'qualiftraceinitial':'Qualif_Trace_Initial',
        'native:multiparttosingleparts_1:Qualif_Trace_Final':'TEMPORARY_OUTPUT'}, feedback = f)


    def Communes(self):
        comm = r"S:\09-Production\CLIENTS\GRT-GAZ\21-0716 ACA RURAL 2021\lot 7 CENTRE\Travail\SIG\FME\02-Communes\Communes_INSEE_2021_EXTRACT_POUR_FME.shp"
        vlayer = QgsVectorLayer(comm, "COMMUNES", "ogr")
        QgsProject.instance().addMapLayer(vlayer)
        vlayer.loadNamedStyle(r"S:\09-Production\CLIENTS\GRT-GAZ\21-0716 ACA RURAL 2021\lot 7 CENTRE\Travail\SIG\FME\Styles_Qgis\COMMUNES.qml")
        
    def Reseaux(self):
        res = r"S:\09-Production\CLIENTS\GRT-GAZ\21-0716 ACA RURAL 2021\lot 7 CENTRE\Travail\SIG\FME\Reseau_Theorique\02-reseaux_brut_correct_nettoye.shp"
        vlayer = QgsVectorLayer(res, "RESEAUX THEORIQUE", "ogr")
        QgsProject.instance().addMapLayer(vlayer)
        vlayer.loadNamedStyle(r"S:\09-Production\CLIENTS\GRT-GAZ\21-0716 ACA RURAL 2021\lot 7 CENTRE\Travail\SIG\FME\Styles_Qgis\RESEAUX_THEORIQUE.qml")
        
        
    def Nett_avcorr(self):
        root = QgsProject.instance().layerTreeRoot()
        group = root.findGroup("AVANT CORRECT")
        for child in group.children():
            if "LIGNE DET" in child.name():
                pass
            else:
                QgsProject.instance().removeMapLayer(child.layerId())
                
                
    def Nett_apcorr(self):
        root = QgsProject.instance().layerTreeRoot()
        group = root.findGroup("APRES CORRECT")
        for child in group.children():
            if "LIGNE" in child.name():
                pass
            else:
                QgsProject.instance().removeMapLayer(child.layerId())